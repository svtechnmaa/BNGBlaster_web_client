name: Build and Test BNGBLASTER App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      commit_id:
        description: 'Full commit ID to build (default: latest commit). e.g daae94a0f72a13f7092812fa42d684b2af827xxx. WARNING: release job will NOT run by this trigger'
        type: string
      run_test:
        description: 'Run test'
        default: true
        type: boolean
      keep_image: 
        description: 'Keep image in GHCR even test fails'
        type: boolean
        default: false

env:
  IMAGE_TEST_TAG: ${{ format('test-v{0}', github.run_number) }}
  IMAGE_NAME: 'bngblaster_web_client'
  CONTAINER_NAME: 'bngblaster_web_client'
  CONTAINER_MAPPING_PORT: '8505:8505'
  COMMIT_FULL_ID: ${{ inputs.commit_id || github.sha }}

jobs:
  build:
    runs-on: ubuntu-dind
    permissions:
      contents: read
      packages: write
    steps:
      
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.COMMIT_FULL_ID }}

    - name: Downcase REPO and shorten COMMIT ID
      run: |
        COMMIT_SHORT_ID=$(git rev-parse --short ${{ env.COMMIT_FULL_ID }})
        echo "COMMIT_SHORT_ID=${COMMIT_SHORT_ID}" >>${GITHUB_ENV}
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        echo "COMMIT_SHORT_ID=${{ env.COMMIT_SHORT_ID }}"
        echo "REPO=${{ env.REPO }}"

    - name: Check existing image in GHCR
      id: check_existing_image
      run: |
        REPO_NAME=$(echo ${{ env.REPO }} | cut -d'/' -f2)
        
        IMAGES=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions" | jq -r ' .[] | {tags: .metadata.container.tags, updated_at: .updated_at, id: .id} ')

        EXISTED_IMAGE=$(echo $IMAGES | jq -c 'select(.tags | contains(["${{ env.COMMIT_SHORT_ID }}"]))')

        if [[ -z $EXISTED_IMAGE ]]; then
          echo "is_image_tag_by_commit_id_existed=false" >> $GITHUB_OUTPUT
        else
          FULL_TAGS=$(echo $EXISTED_IMAGE | jq -c '.tags')
          if [[ $FULL_TAGS == *"latest"* || $FULL_TAGS =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then    
            echo "is_latest_or_release_image=true" >> $GITHUB_OUTPUT
            echo "is_latest_or_release_image=true"
          else
            echo "is_latest_or_release_image=false" >> $GITHUB_OUTPUT
            echo "is_latest_or_release_image=false"
          fi

          echo "Image which has tag ${{ env.COMMIT_SHORT_ID }} is existed. The full tags are $FULL_TAGS. Skipping the rest of the build job..."
          echo "is_image_tag_by_commit_id_existed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image
      if: github.event_name == 'push' || github.event_name == 'pull_request' || steps.check_existing_image.outputs.is_image_tag_by_commit_id_existed == 'false'
      run: |
        echo ${{ steps.check_existing_image.outputs.is_image_tag_by_commit_id_existed }}
        docker build -t ${{ env.IMAGE_NAME }} .

    - id: run_and_check_container_status
      if: github.event_name == 'push' || github.event_name == 'pull_request' || steps.check_existing_image.outputs.is_image_tag_by_commit_id_existed == 'false'
      name: Run BNGBlaster app
      uses: svtechnmaa/.github/actions/run_docker_container@main
      with:
        imageName: '${{ env.IMAGE_NAME }}'
        containerName: '${{ env.CONTAINER_NAME }}'
        containerMappingPort: '${{ env.CONTAINER_MAPPING_PORT }}'

    - name: Login to GitHub Container Registry
      if: github.event_name == 'push' || github.event_name == 'pull_request' || steps.check_existing_image.outputs.is_image_tag_by_commit_id_existed == 'false'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: '${{ github.repository_owner }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
        
    - name: Push image to GitHub Container Registry
      if: github.event_name == 'push' || github.event_name == 'pull_request' || steps.check_existing_image.outputs.is_image_tag_by_commit_id_existed == 'false'
      run: |
        docker tag ${{ env.IMAGE_NAME }}:latest ghcr.io/${{ env.REPO }}:${{ env.IMAGE_TEST_TAG }}
        docker tag ${{ env.IMAGE_NAME }}:latest ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}
        docker push ghcr.io/${{ env.REPO }}:${{ env.IMAGE_TEST_TAG }}
        docker push ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}

  test:
    if: |
      github.event_name == 'push'|| 
      github.event_name == 'pull_request' || 
      ( github.event_name == 'workflow_dispatch' && inputs.run_test ) 
    runs-on: robot-dind
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.COMMIT_FULL_ID }}

    - name: Downcase REPO and shorten COMMIT ID
      run: |
        COMMIT_SHORT_ID=$(git rev-parse --short ${{ env.COMMIT_FULL_ID }})
        echo "COMMIT_SHORT_ID=${COMMIT_SHORT_ID}" >>${GITHUB_ENV}
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        echo "COMMIT_SHORT_ID=${{ env.COMMIT_SHORT_ID }}"
        echo "REPO=${{ env.REPO }}"

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: '${{ github.repository_owner }}'
        password: '${{ secrets.GITHUB_TOKEN }}'

    - name: Downcase REPO
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    - name: Pull Docker image
      run: docker pull ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}

    - id: run_and_check_container_status
      name: Run BNGBlaster app
      uses: svtechnmaa/.github/actions/run_docker_container@main
      with:
        imageName: 'ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}'
        containerName: '${{ env.CONTAINER_NAME }}'
        containerMappingPort: '${{ env.CONTAINER_MAPPING_PORT }}'

    - name: Run Robot Framework tests
      run: |
        echo "##[command]robot tests/"
        robot tests/

    - name: Delete package from GHCR if test fails
      if: failure() && !inputs.keep_image 
      run: |
        if [[ "${{ needs.build.outputs.is_latest_or_release_image }}" == "true" ]]; then
          echo "Image with tag ${{ env.COMMIT_SHORT_ID }} must NOT be deleted as it is release or latest image."
        else
          echo "Robot test failed, deleting package from GHCR..."
          REPO_NAME=$(echo ${{ env.REPO }} | cut -d'/' -f2)
          echo "Repo name: $REPO_NAME"
          VERSION_ID=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions" | jq -r '.[] | select(.metadata.container.tags[] == "${{ env.COMMIT_SHORT_ID }}") | .id')
          echo "Package version ID: $VERSION_ID"
          curl -i -X DELETE -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -H "Accept: application/vnd.github.v3+json" "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions/$VERSION_ID"
        fi


    - name: 'Upload robot test result'
      if: always()
      uses: actions/upload-artifact@v4.6.0
      with:
        name: robot-test-result-#${{ github.run_number }}
        path: |
          ./output.xml
          ./log.html
          ./report.html
   
  release: 
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-dind
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If permission denied for protected branch, use ${{ secrets.PUSH_TOKEN }} instead.
    
    - name: No release published
      if: ${{ steps.semantic.outputs.new_release_published == 'false' }}
      run: |
        echo "No release published, skipping the rest of the job..."

    
    - name: Downcase REPO and shorten COMMIT ID
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
          COMMIT_SHORT_ID=$(git rev-parse --short ${{ env.COMMIT_FULL_ID }})
          echo "COMMIT_SHORT_ID=${COMMIT_SHORT_ID}" >>${GITHUB_ENV}
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "COMMIT_SHORT_ID=${{ env.COMMIT_SHORT_ID }}"
          echo "REPO=${{ env.REPO }}"

    - name: Login to GitHub Container Registry
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: '${{ github.repository_owner }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
    
    - name: Pull image from GitHub Container Registry
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        docker pull ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}

    - name: Delete package from GHCR after successful release
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        if [[ "${{ needs.build.outputs.is_latest_or_release_image }}" == "true" ]]; then
          echo "Image with tag ${{ env.COMMIT_SHORT_ID }} must NOT be deleted as it is release or latest image."
        else
          echo "New release ${{ env.RELEASE_IMAGE_TAG }} was published, deleting image ${{ env.COMMIT_SHORT_ID }} from GHCR..."
          REPO_NAME=$(echo ${{ env.REPO }} | cut -d'/' -f2)
          echo "Repo name: $REPO_NAME"
          VERSION_ID=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions" | jq -r '.[] | select(.metadata.container.tags[] == "${{ env.COMMIT_SHORT_ID }}") | .id')
          echo "Package version ID: $VERSION_ID"
          curl -i -X DELETE -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -H "Accept: application/vnd.github.v3+json" "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions/$VERSION_ID"
        fi
      env: 
        RELEASE_IMAGE_TAG: v${{ steps.semantic.outputs.new_release_version }}
        
    - name: Push latest released image to GitHub Container Registry
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        docker push ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }}  

        docker tag ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }} ghcr.io/${{ env.REPO }}:${{ env.RELEASE_IMAGE_TAG }}
        docker tag ghcr.io/${{ env.REPO }}:${{ env.COMMIT_SHORT_ID }} ghcr.io/${{ env.REPO }}:latest

        docker push ghcr.io/${{ env.REPO }}:${{ env.RELEASE_IMAGE_TAG }}
        docker push ghcr.io/${{ env.REPO }}:latest
      env: 
        RELEASE_IMAGE_TAG: v${{ steps.semantic.outputs.new_release_version }}

    - name: Install Helm
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Setup Python
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: actions/setup-python@v5.3.0
      with:
        python-version: "3.13"
    
    - name: Clone charts Repository
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository_owner }}/charts'
        ref: 'main'
        token: ${{ secrets.PUSH_TOKEN }}
        path: charts

    - name: Clone stack_charts Repository
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository_owner }}/stacked_charts'
        ref: 'master'
        token: '${{ secrets.PUSH_TOKEN }}'
        path: stacked_charts

    - name: Clone SVTECH_CI_utilities Repository
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository_owner }}/SVTECH_CI_utilities'
        ref: 'dev-jenkins'
        token: '${{ secrets.PUSH_TOKEN }}'
        path: SVTECH_CI_utilities

    - name: Import GPG key
      if: steps.semantic.outputs.new_release_published == 'true'
      uses: crazy-max/ghaction-import-gpg@v6.2.0
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        # git_user_signingkey: true
        # git_commit_gpgsign: true
    
    - name: Modify image version in charts
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        sed -i '/^  repository: svtechnmaa\/bngblaster_web_client/{N;s/  tag: .*/  tag: '"${{ env.RELEASE_IMAGE_TAG }}"'/}' charts/kubernetes/bngblaster/values.yaml
      env:
        RELEASE_IMAGE_TAG: v${{ steps.semantic.outputs.new_release_version }}

    - name: Modify image version in stack_charts
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        pip install requests pyyaml
        python3 SVTECH_CI_utilities/auto_testing/python_script/public_helmchart_release.py --BUILD_VARS_PATH='.' --ID='.' --GITHUB_TOKEN=${{secrets.PUSH_TOKEN}} --OWNER=${{ github.repository_owner}} --charts_string=bngblaster --REPO=charts

    - name: Update image version in charts
      if: steps.semantic.outputs.new_release_published == 'true'
      env:
        GIT_USER_NAME: "svtechnmaa"
        GIT_USER_EMAIL: "nmaa@svtech.com.vn"
        RELEASE_IMAGE_TAG: v${{ steps.semantic.outputs.new_release_version }}
      run: |
        cd charts
        helm repo index artifacthub

        if [[ `git diff --name-only` ]]; then  
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          git config commit.gpgSign true
          git config user.signingkey ${{ secrets.GPG_KEY_ID }}

          git add .
          git commit --no-verify -m "no-ci: Update BNGBlaster image version to ${{ env.RELEASE_IMAGE_TAG }}"
          # git remote set-url origin https://svtechnmaa:${{secrets.PUSH_TOKEN}}@github.com/svtechnmaa/charts.git
          git push origin main
        else 
          echo "No changes to commit" 
        fi
    
    - name: Update image version in stack_charts
      if: steps.semantic.outputs.new_release_published == 'true'
      env:
        GIT_USER_NAME: "svtechnmaa"
        GIT_USER_EMAIL: "nmaa@svtech.com.vn"
        RELEASE_IMAGE_TAG: v${{ steps.semantic.outputs.new_release_version }}

      run: |
        cd stacked_charts
        if [[ `git diff --name-only` ]]; then 

          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          git config commit.gpgSign true
          git config user.signingkey ${{ secrets.GPG_KEY_ID }}

          git add .
          git commit -S -m "no-ci: Update BNGBlaster image version to ${{ env.RELEASE_IMAGE_TAG }}" 
          # git remote set-url origin https://svtechnmaa:${{secrets.PUSH_TOKEN}}@github.com/svtechnmaa/stacked_charts.git
          git push origin master  
        else 
          echo "No changes to commit" 
        fi